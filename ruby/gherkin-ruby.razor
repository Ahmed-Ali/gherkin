@using Berp;
@helper CallProduction(ProductionRule production)
{
  switch(production.Type)
  {
    case ProductionRuleType.Start:
        @:context.ast_builder.push(:rule_@production.RuleName)
      break;
    case ProductionRuleType.End:
        @:context.ast_builder.pop(:rule_@production.RuleName)
      break;
    case ProductionRuleType.Process:
        @:context.ast_builder.build(token)
      break;
  }
}
# This file is generated. Do not edit! Edit gherkin-ruby.razor instead.
require 'gherkin/ast_builder'

module Gherkin
  class ParserContext
    attr_reader :token_scanner
    attr_reader :ast_builder
    attr_reader :token_matcher
    attr_reader :token_queue

    def initialize(token_scanner, ast_builder, token_matcher)
      @@token_scanner = token_scanner
      @@ast_builder = ast_builder
      @@token_matcher = token_matcher

      @@token_queue = []
    end
  end

  class @Model.ParserClassName

    def parse(token_scanner)
      context = ParserContext.new(token_scanner, ASTBuilder.new, TokenMatcher.new)

      context.ast_builder.push(:rule_@Model.RuleSet.StartRule.Name)
      state = 0
      loop do
        token = read_token(context)
        state = match_token(state, token, context)

        break if token.eof?
      end

      if (state != @Model.EndState.Id)
        raise ParseError.new("parsing error: end of file expected")
      end

      context.ast_builder.pop(:rule_@Model.RuleSet.StartRule.Name)
      context.ast_builder.root_node?
    end

    def read_token(context)
      context.token_queue.count > 0 ? context.token_queue.shift : context.token_scanner.read
    end

    def match_token(state, token, context)
      case state
      @foreach(var state in Model.States.Values.Where(s => !s.IsEndState))
      {
      @:when @state.Id
        @:new_state = match_token_at_@(state.Id)(token, context)
      }
      else
        raise ParserError.new("unknown state")
      end

      new_state
    end

    @foreach(var state in Model.States.Values.Where(s => !s.IsEndState))
    {
    <text>
    # @Raw(state.Comment)
    def match_token_at_@(state.Id)(token, context)
      @foreach (var transition in state.Transitions)
      {
      @:if (context.token_matcher.match_@(transition.TokenType)(token))
        if (transition.LookAheadHint != null)
        {
        @:if (lookahead_@(transition.LookAheadHint.Id)(context, token))
        }
        foreach(var production in transition.Productions)
        {
          @CallProduction(production)
        }
        @:return @transition.TargetState
        if (transition.LookAheadHint != null)
        {
        @:end
        }
      @:end
      }
      raise ParseError.new
    end
    </text>
    }

    @foreach(var lookAheadHint in Model.RuleSet.LookAheadHints)
    {
    <text>
    def lookahead_@(lookAheadHint.Id)(context, current_token)
      current_token.detach
      queue = []
      match = false
      loop do
        token = read_token(context)
        token.detach
        queue.push(token)

        if (false \
        @foreach(var tokenType in lookAheadHint.ExpectedTokens)
          {
          @:|| context.token_matcher.match_@(tokenType)(token) \
          }
        )
          match = true
          break
        end

        if not(false \
        @foreach(var tokenType in lookAheadHint.Skip)
          {
          @:|| context.token_matcher.match_@(tokenType)(token) \
          }
        )
          break
        end
      end
      queue.each do |t|
        context.token_queue.push(t)
      end
      match
    end
    </text>
    }
  end
end
